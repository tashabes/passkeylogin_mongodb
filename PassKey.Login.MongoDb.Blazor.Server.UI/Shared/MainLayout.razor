@inherits LayoutComponentBase
@using PassKey.Login.MongoDb.Blazor.Server.UI.Data
@using PassKey.Login.MongoDb.Blazor.Server.UI.Service
@inject PassKey.Login.MongoDb.Blazor.Server.UI.IService.IUserService userService
@inject PassKey.Login.MongoDb.Blazor.Server.UI.IService.ICompaniesService companiesService
@inject IJSRuntime jsRuntime

<style>
    .sidebar {
        background-color: #1DBED0 
    }

    .user-initial-circle {
        background-color: #1DBED0
    }




</style>

<PageTitle>PassKey.Login.MongoDb.Blazor.Server.UI</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
           
            @if(user!=null){
            <h5>@DateTime.Now.ToString("D")</h5>
            <h4>Good @GetGreeting(), @user.Name <span class="user-initial-circle">@userInitial</span></h4>
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    Users user = new Users();
    Companies company = new Companies();
    bool isLoaded = false; // Track whether data has been loaded.
    string userInitial;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Check if it's the first render and the data is not loaded yet.
        if (firstRender && !isLoaded)
        {
            string uniqueIdentifier = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "userUniqueIdentifier");
            user = userService.GetUser(uniqueIdentifier);
            if (user != null)
            {
                userInitial = user.Name.Substring(0, 1);
                //company = companiesService.GetCompany(user.CompanyId);
            }
            // Mark the data as loaded to prevent subsequent calls.
            isLoaded = true;

            // Re-render the component to update the UI with the loaded data.
            StateHasChanged();
        }
    }
    private string GetGreeting()
    {
        var currentTime = DateTime.Now;

        if (currentTime.Hour >= 5 && currentTime.Hour < 12)
        {
            return "morning";
        }
        else if (currentTime.Hour >= 12 && currentTime.Hour < 17)
        {
            return "afternoon";
        }
        else
        {
            return "evening";
        }
    }
}